{"version":3,"sources":["utils/numbers.ts","components/Avatar.tsx","components/TableUsersBalances.tsx","components/SelectOptions.tsx","App.tsx","hooks/fetch.ts","utils/transactions.ts","index.js"],"names":["formatZero","val","Avatar","props","uid","size","style","width","height","borderRadius","backgroundColor","overflow","dangerouslySetInnerHTML","__html","avatar","skeletonData","user_id","GBP","USD","EUR","lastActivity","textColor","value","parseFloat","color","TableUsersBalances","data","loading","error","rows","useMemo","Box","sx","p","Alert","severity","message","length","TableContainer","Table","minWidth","TableHead","TableRow","TableCell","padding","align","TableBody","map","row","border","Skeleton","variant","component","scope","dayjs","format","SelectOptions","onChange","options","FormControl","Select","event","target","selectedOption","find","o","option","MenuItem","display","root","process","url","App","useState","setOption","response","setResponse","setError","setLoading","fetch","useCallback","a","undefined","delay","axios","get","resp","isAxiosError","useEffect","useFetch","usersBalancesData","transactions","users","Map","forEach","transaction","has","set","timestamp","user","currency","Decimal","add","amount","computeUsersBalances","handleChange","m","Paper","Toolbar","Typography","flex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ff61b6f.chunk.js","sourcesContent":["import Decimal from 'decimal.js'\n\nexport function formatNumber(val: number | Decimal) {\n  return (val > 0 ? '+' : '') + val\n}\n\nexport function formatZero(val: number | Decimal | string) {\n  // NODE: using a non-strick equality comparison on purpose as the value can be a string\n  // eslint-disable-next-line eqeqeq\n  return val == 0 ? '-' : val\n}","import avatar from \"gradient-avatar\";\n\ninterface Props {\n  uid: string;\n  size: number;\n}\n\nexport default function Avatar(props: Props) {\n  const { uid, size } = props;\n\n  return (\n    <div\n      style={{\n        width: size,\n        height: size,\n        borderRadius: size,\n        backgroundColor: \"lightgrey\",\n        overflow: \"hidden\",\n      }}\n      {...(props.uid && {\n        dangerouslySetInnerHTML: { __html: avatar(uid, size) },\n      })}\n    />\n  );\n}\n","import { useMemo } from \"react\";\n\nimport dayjs from 'dayjs'\n\nimport Box from \"@mui/material/Box\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport Alert from \"@mui/material/Alert\";\n\nimport { UserBalance } from \"../types/schema\";\n\nimport Avatar from \"./Avatar\";\nimport { formatZero } from \"../utils/numbers\";\n\nconst skeletonData: UserBalance[] = [\n  { user_id: '1', GBP: '0', USD: '0', EUR: '0', lastActivity: '' },\n  { user_id: '2', GBP: '0', USD: '0', EUR: '0', lastActivity: '' },\n  { user_id: '3', GBP: '0', USD: '0', EUR: '0', lastActivity: '' },\n  { user_id: '4', GBP: '0', USD: '0', EUR: '0', lastActivity: '' },\n  { user_id: '5', GBP: '0', USD: '0', EUR: '0', lastActivity: '' },\n];\n\nfunction textColor(value: string) {\n  if (parseFloat(value) < 0) {\n    return { color: \"#ec535a\" };\n  }\n\n  if (parseFloat(value) > 0) {\n    return { color: \"#27a197\" };\n  }\n\n  return {}\n}\n\ninterface Props {\n  data: UserBalance[]\n  loading?: boolean\n  error?: Error\n}\n\nexport default function TableUsersBalances(props: Props) {\n  const { data, loading, error } = props;\n\n  const rows = useMemo(() => {\n    if (loading) {\n      return skeletonData;\n    }\n\n    return data;\n  }, [data, loading]);\n\n  if (error) {\n    return (\n      <Box sx={{ p: 1 }}>\n        <Alert severity=\"error\">\n          {error.message}\n        </Alert>\n      </Box>\n    )\n  }\n\n  if (rows.length === 0) {\n    return (\n      <Box sx={{ p: 1 }}>\n        <Alert severity=\"info\">\n          No Transactions\n        </Alert>\n      </Box>\n    )\n  }\n\n  return (\n    <TableContainer>\n      <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell padding=\"checkbox\"></TableCell>\n            <TableCell align=\"left\">User ID</TableCell>\n            <TableCell align=\"right\">GBP</TableCell>\n            <TableCell align=\"right\">USD</TableCell>\n            <TableCell align=\"right\">EUR</TableCell>\n            <TableCell align=\"right\">Last Activity</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row) => (\n            <TableRow\n              key={row.user_id}\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>\n                {loading \n                  ? <Skeleton variant=\"circular\" width={30} height={30} /> \n                  : <Avatar uid={row.user_id} size={30} />\n                }\n              </TableCell>\n              <TableCell component=\"th\" scope=\"row\">\n                {loading ? <Skeleton variant=\"text\" width={300} /> : row.user_id}\n              </TableCell>\n              <TableCell align=\"right\" sx={textColor(row.GBP)}>\n                {loading ? <Skeleton variant=\"text\" /> : formatZero(row.GBP)}\n              </TableCell>\n              <TableCell align=\"right\" sx={textColor(row.USD)}>\n                {loading ? <Skeleton variant=\"text\" /> : formatZero(row.USD)}\n              </TableCell>\n              <TableCell align=\"right\" sx={textColor(row.EUR)}>\n                {loading ? <Skeleton variant=\"text\" /> : formatZero(row.EUR)}\n              </TableCell>\n              <TableCell align=\"right\">\n                {loading ? <Skeleton variant=\"text\" /> : dayjs(row.lastActivity).format('DD-MM-YYYY')}\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","import FormControl from \"@mui/material/FormControl\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\ntype Option = { value: string, display: string }\n\ninterface Props {\n  value: string\n  options: Option[]\n  onChange: (selectedOption: Option) => void\n}\n\nexport default function SelectOptions(props: Props) {\n  const { value, onChange, options } = props;\n\n  const handleChange = (event: SelectChangeEvent<string>) => {\n    const {\n      target: { value },\n    } = event;\n\n    if (onChange) {\n      const selectedOption = options.find((o) => o.value === value);\n\n      if (selectedOption) {\n        onChange(selectedOption);\n      }\n    }\n  };\n\n  return (\n    <FormControl sx={{ p: 1, width: 200 }}>\n      <Select value={value} onChange={handleChange}>\n        {options.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.display}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n","import { useState, useMemo, useCallback } from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { Transaction } from \"./types/schema\";\nimport { useFetch } from \"./hooks/fetch\";\nimport { computeUsersBalances } from \"./utils/transactions\";\nimport TableUsersBalances from \"./components/TableUsersBalances\";\nimport SelectOptions from \"./components/SelectOptions\";\n\nconst root = process.env.PUBLIC_URL\n\nconst options = [\n  {\n    value: \"small\",\n    display: \"Small\",\n    url: `${root}/transactions-small.json`,\n  },\n  {\n    value: \"medium\",\n    display: \"Medium\",\n    url: `${root}/transactions-medium.json`,\n  },\n  {\n    value: \"large\",\n    display: \"Large\",\n    url: `${root}/transactions-large.json`,\n  },\n  {\n    value: \"xlarge\",\n    display: \"X-Large (404)\",\n    url: `${root}/transactions-x-large.json`,\n  },\n  {\n    value: \"empty\",\n    display: \"Empty\",\n    url: `${root}/transactions-empty.json`,\n  },\n];\n\nfunction App() {\n  const [option, setOption] = useState(options[0]);\n\n  const { data, error, loading } = useFetch<Transaction[]>(option.url);\n\n  const usersBalancesData = useMemo(\n    () => computeUsersBalances(data || []),\n    [data]\n  );\n\n  const handleChange = useCallback((selectedOption) => {\n    setOption(selectedOption);\n  }, []);\n\n  return (\n    <Box sx={{ m: 6 }}>\n      <Paper>\n        <Toolbar>\n          <Typography sx={{ flex: \"1 1 100%\" }} variant=\"h6\">\n            Transactions\n          </Typography>\n\n          <SelectOptions\n            value={option.value}\n            options={options}\n            onChange={handleChange}\n          />\n        </Toolbar>\n\n        <TableUsersBalances\n          data={usersBalancesData}\n          loading={loading}\n          error={error}\n        />\n      </Paper>\n    </Box>\n  );\n}\n\nexport default App;\n","import { useEffect, useState, useCallback } from \"react\"\n\nimport axios, { AxiosResponse, AxiosError } from \"axios\"\nimport delay from 'delay'\n\nexport function useFetch<T>(url: string) {\n    const [response, setResponse] = useState<AxiosResponse<T>>()\n    const [error, setError] = useState<AxiosError>()\n    const [loading, setLoading] = useState(false)\n  \n    const fetch = useCallback(async (url) => {\n        setLoading(true)\n        setError(undefined)\n  \n        try {\n          // for demo purpose\n          await delay(1000)\n\n          const resp = await axios.get<T>(url)\n  \n          setResponse(resp)\n        } catch (error) {\n          if (axios.isAxiosError(error))  {\n            setError(error)\n          }\n        } finally {\n          setLoading(false)\n        }\n      }, []\n    )\n  \n    useEffect(() => {\n      fetch(url)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [url])\n  \n    return {\n      ...response,\n      loading,\n      error\n    }\n  }","import Decimal from 'decimal.js'\n\nimport type { Transaction, UserBalance } from '../types/schema'\n\nimport { formatNumber } from './numbers'\n\nexport function computeUsersBalances(transactions: Transaction[]): UserBalance[] {\n  const users = new Map<string, UserBalance>()\n\n  transactions.forEach((transaction) => {\n    // Initiate balances if user does not exist \n    if (!users.has(transaction.user_id)) {\n      users.set(transaction.user_id, {\n        user_id: transaction.user_id,\n        GBP: '0',\n        USD: '0',\n        EUR: '0',\n        lastActivity: transaction.timestamp,\n      })\n    }\n\n    const user = users.get(transaction.user_id)\n    \n    if (user) {\n      // Add to the right user's currency blance\n      \n      user[transaction.currency] = formatNumber(\n        new Decimal(user[transaction.currency]).add(transaction.amount)\n      )\n\n      // Overwrite date if latest\n      // HACK: JavaScript string comparison is able to do this \n      // but it's better using a library like dayjs or moment\n      if (transaction.timestamp > user.lastActivity) {\n       user.lastActivity = transaction.timestamp\n      }\n    }\n\n    return users\n  })\n\n  const arr = [...users].map(([_key,obj]) => obj)\n\n  return arr\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}